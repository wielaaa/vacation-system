import streamlit as st
import pandas as pd
import hashlib
import json
from datetime import datetime, timedelta
import os
import plotly.express as px

# إعدادات الصفحة
st.set_page_config(
    page_title="نظام إدارة الإجازات - المطار",
    page_icon="✈️",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS مخصص للعربية
st.markdown("""
<style>
    .main .block-container {
        direction: rtl;
        text-align: right;
    }
    .stButton button {
        width: 100%;
    }
    .success-msg {
        background-color: #d4edda;
        color: #155724;
        padding: 10px;
        border-radius: 5px;
        margin: 10px 0;
    }
    .error-msg {
        background-color: #f8d7da;
        color: #721c24;
        padding: 10px;
        border-radius: 5px;
        margin: 10px 0;
    }
    .info-box {
        background-color: #d1ecf1;
        border: 1px solid #bee5eb;
        border-radius: 5px;
        padding: 15px;
        margin: 10px 0;
    }
</style>
""", unsafe_allow_html=True)

# وظائف نظام الملفات
def تشفير_كلمة_المرور(كلمة_المرور):
    return hashlib.sha256(كلمة_المرور.encode()).hexdigest()

def تحميل_البيانات(اسم_الملف, بيانات_افتراضية=None):
    """تحميل البيانات من ملف CSV"""
    try:
        return pd.read_csv(اسم_الملف)
    except:
        if بيانات_افتراضية is not None:
            return بيانات_افتراضية
        return pd.DataFrame()

def حفظ_البيانات(اسم_الملف, البيانات):
    """حفظ البيانات في ملف CSV"""
    البيانات.to_csv(اسم_الملف, index=False)

def تهيئة_النظام():
    """تهيئة البيانات الأولية للنظام"""
    
    # بيانات المستخدمين الافتراضية
    بيانات_المستخدمين = pd.DataFrame([{
        'معرف': 1,
        'اسم_المستخدم': '5485',
        'كلمة_المرور': تشفير_كلمة_المرور('4856739'),
        'اسم_الموظف': 'المسؤول العام',
        'نوع_المستخدم': 'مدير_النظام',
        'القسم': 'الإدارة العامة',
        'الحالة': 'نشط',
        'تاريخ_الإنشاء': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    }])
    
    # أنواع الإجازات
    أنواع_الإجازات = pd.DataFrame([
        {'معرف': 1, 'اسم_الإجازة': 'إجازة اعتيادية', 'الوصف': 'الإجازة الاعتيادية السنوية', 'الحالة': 'مفعل'},
        {'معرف': 2, 'اسم_الإجازة': 'إجازة عرضة', 'الوصف': 'إجازة العرضة', 'الحالة': 'مفعل'},
        {'معرف': 3, 'اسم_الإجازة': 'إجازة بدل راحة', 'الوصف': 'بدل الراحة', 'الحالة': 'مفعل'},
        {'معرف': 4, 'اسم_الإجازة': 'إجازة بدل عمل', 'الوصف': 'بدل العمل', 'الحالة': 'مفعل'},
        {'معرف': 5, 'اسم_الإجازة': 'إجازة بدون مرتب', 'الوصف': 'إجازة بدون مرتب', 'الحالة': 'مفعل'},
        {'معرف': 6, 'اسم_الإجازة': 'إجازة مرضية', 'الوصف': 'الإجازة المرضية', 'الحالة': 'مفعل'},
        {'معرف': 7, 'اسم_الإجازة': 'إجازة طارئة', 'الوصف': 'الإجازة الطارئة', 'الحالة': 'مفعل'},
        {'معرف': 8, 'اسم_الإجازة': 'إجازة دراسية', 'الوصف': 'الإجازة الدراسية', 'الحالة': 'مفعل'},
        {'معرف': 9, 'اسم_الإجازة': 'إجازة حج / عمرة', 'الوصف': 'إجازة الحج أو العمرة', 'الحالة': 'مفعل'},
        {'معرف': 10, 'اسم_الإجازة': 'إجازة مرافقة مريض', 'الوصف': 'إجازة مرافقة المريض', 'الحالة': 'مفعل'}
    ])
    
    # أرصدة الإجازات
    أرصدة_الإجازات = pd.DataFrame([{
        'معرف': 1,
        'معرف_الموظف': 1,
        'رصيد_السنة_الحالية': 30,
        'رصيد_العام_السابق_1': 15,
        'رصيد_العام_السابق_2': 10,
        'السنة': 2024,
        'تاريخ_التحديث': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    }])
    
    # حفظ البيانات
    حفظ_البيانات('المستخدمين.csv', بيانات_المستخدمين)
    حفظ_البيانات('أنواع_الإجازات.csv', أنواع_الإجازات)
    حفظ_البيانات('أرصدة_الإجازات.csv', أرصدة_الإجازات)
    حفظ_البيانات('طلبات_الإجازة.csv', pd.DataFrame())
    حفظ_البيانات('الإشعارات.csv', pd.DataFrame())

# صفحة تسجيل الدخول
def صفحة_تسجيل_الدخول():
    st.markdown("<h1 style='text-align: center; color: #1f77b4;'>✈️ نظام إدارة الإجازات - المطار</h1>", unsafe_allow_html=True)
    
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        with st.form("تسجيل_الدخول"):
            st.subheader("تسجيل الدخول")
            اسم_المستخدم = st.text_input("اسم المستخدم")
            كلمة_المرور = st.text_input("كلمة المرور", type="password")
            زر_الدخول = st.form_submit_button("🚀 دخول إلى النظام")
            
            if زر_الدخول:
                if اسم_المستخدم and كلمة_المرور:
                    المستخدمين = تحميل_البيانات('المستخدمين.csv')
                    
                    if not المستخدمين.empty:
                        مستخدم = المستخدمين[
                            (المستخدمين['اسم_المستخدم'] == اسم_المستخدم) & 
                            (المستخدمين['كلمة_المرور'] == تشفير_كلمة_المرور(كلمة_المرور)) &
                            (المستخدمين['الحالة'] == 'نشط')
                        ]
                        
                        if not مستخدم.empty:
                            مستخدم = مستخدم.iloc[0]
                            st.session_state.معرف_المستخدم = مستخدم['معرف']
                            st.session_state.اسم_المستخدم = مستخدم['اسم_المستخدم']
                            st.session_state.اسم_الموظف = مستخدم['اسم_الموظف']
                            st.session_state.نوع_المستخدم = مستخدم['نوع_المستخدم']
                            st.session_state.القسم = مستخدم['القسم']
                            st.success(f"✅ مرحباً {مستخدم['اسم_الموظف']}!")
                            time.sleep(1)
                            st.rerun()
                        else:
                            st.error("❌ اسم المستخدم أو كلمة المرور غير صحيحة")
                    else:
                        st.error("❌ لا يوجد مستخدمين في النظام")
                else:
                    st.error("❌ يرجى إدخال اسم المستخدم وكلمة المرور")
        
        st.markdown("---")
        st.info("""
        **المستخدم الافتراضي للاختبار:**
        - **اسم المستخدم:** 5485
        - **كلمة المرور:** 4856739
        """)

# لوحة تحكم الموظف
def لوحة_الموظف():
    st.sidebar.title(f"👤 {st.session_state.اسم_الموظف}")
    st.sidebar.markdown(f"**القسم:** {st.session_state.القسم}")
    
    قائمة_الموظف = ["الرئيسية", "طلب إجازة جديدة", "طلباتي", "رصيد الإجازات"]
    اختيار = st.sidebar.selectbox("القائمة", قائمة_الموظف)
    
    if اختيار == "الرئيسية":
        الرئيسية_الموظف()
    elif اختيار == "طلب إجازة جديدة":
        طلب_إجازة_جديدة()
    elif اختيار == "طلباتي":
        عرض_طلباتي()
    elif اختيار == "رصيد الإجازات":
        عرض_رصيد_الإجازات()

def الرئيسية_الموظف():
    st.title("🏠 لوحة تحكم الموظف")
    
    # إحصائيات سريعة
    col1, col2, col3, col4 = st.columns(4)
    
    # تحميل البيانات
    طلبات_الإجازة = تحميل_البيانات('طلبات_الإجازة.csv', pd.DataFrame())
    أرصدة_الإجازات = تحميل_البيانات('أرصدة_الإجازات.csv', pd.DataFrame())
    
    if not طلبات_الإجازة.empty:
        طلبات_الموظف = طلبات_الإجازة[طلبات_الإجازة['معرف_الموظف'] == st.session_state.معرف_المستخدم]
        عدد_الطلبات = len(طلبات_الموظف)
        طلبات_معلقة = len(طلبات_الموظف[طلبات_الموظف['الحالة'] == 'قيد المراجعة'])
    else:
        عدد_الطلبات = 0
        طلبات_معلقة = 0
    
    if not أرصدة_الإجازات.empty:
        رصيد_الموظف = أرصدة_الإجازات[أرصدة_الإجازات['معرف_الموظف'] == st.session_state.معرف_المستخدم]
        if not رصيد_الموظف.empty:
            رصيد_حالي = رصيد_الموظف.iloc[0]['رصيد_السنة_الحالية']
        else:
            رصيد_حالي = 0
    else:
        رصيد_حالي = 0
    
    with col1:
        st.metric("إجمالي الطلبات", عدد_الطلبات)
    with col2:
        st.metric("طلبات قيد المراجعة", طلبات_معلقة)
    with col3:
        st.metric("رصيد السنة الحالية", رصيد_حالي)
    
    # آخر الطلبات
    st.subheader("📋 آخر طلبات الإجازة")
    
    if not طلبات_الإجازة.empty:
        طلبات_الموظف = طلبات_الإجازة[طلبات_الإجازة['معرف_الموظف'] == st.session_state.معرف_المخدم].tail(5)
        أنواع_الإجازات = تحميل_البيانات('أنواع_الإجازات.csv')
        
        if not طلبات_الموظف.empty:
            بيانات_الجدول = []
            for _, طلب in طلبات_الموظف.iterrows():
                نوع_الإجازة = أنواع_الإجازات[أنواع_الإجازات['معرف'] == طلب['نوع_الإجازة']]
                اسم_الإجازة = نوع_الإجازة.iloc[0]['اسم_الإجازة'] if not نوع_الإجازة.empty else "غير معروف"
                
                بيانات_الجدول.append({
                    "نوع الإجازة": اسم_الإجازة,
                    "من": طلب['تاريخ_البدء'],
                    "إلى": طلب['تاريخ_الانتهاء'],
                    "عدد الأيام": طلب['عدد_الأيام'],
                    "الحالة": طلب['الحالة'],
                    "تاريخ الطلب": طلب['تاريخ_الطلب']
                })
            
            st.dataframe(بيانات_الجدول, use_container_width=True)
        else:
            st.info("لا توجد طلبات إجازة حتى الآن")
    else:
        st.info("لا توجد طلبات إجازة حتى الآن")

def طلب_إجازة_جديدة():
    st.title("📝 طلب إجازة جديدة")
    
    # تحميل البيانات
    أنواع_الإجازات = تحميل_البيانات('أنواع_الإجازات.csv')
    أرصدة_الإجازات = تحميل_البيانات('أرصدة_الإجازات.csv', pd.DataFrame())
    
    with st.form("طلب_إجازة"):
        col1, col2 = st.columns(2)
        
        with col1:
            if not أنواع_الإجازات.empty:
                نوع_الإجازة = st.selectbox(
                    "نوع الإجازة",
                    options=أنواع_الإجازات['معرف'].tolist(),
                    format_func=lambda x: أنواع_الإجازات[أنواع_الإجازات['معرف'] == x]['اسم_الإجازة'].iloc[0]
                )
            تاريخ_البدء = st.date_input("تاريخ البدء", min_value=datetime.now().date())
            السبب = st.text_area("سبب الإجازة")
        
        with col2:
            # عرض معلومات الرصيد
            if not أرصدة_الإجازات.empty:
                رصيد_الموظف = أرصدة_الإجازات[أرصدة_الإجازات['معرف_الموظف'] == st.session_state.معرف_المستخدم]
                if not رصيد_الموظف.empty:
                    رصيد = رصيد_الموظف.iloc[0]
                    st.info(f"""
                    **رصيد الإجازات المتاح:**
                    - السنة الحالية: {رصيد['رصيد_السنة_الحالية']} يوم
                    - العام السابق 1: {رصيد['رصيد_العام_السابق_1']} يوم
                    - العام السابق 2: {رصيد['رصيد_العام_السابق_2']} يوم
                    """)
                else:
                    st.warning("لا يوجد رصيد إجازات متاح")
            else:
                st.warning("لا يوجد رصيد إجازات متاح")
            
            تاريخ_الانتهاء = st.date_input("تاريخ الانتهاء", min_value=datetime.now().date())
        
        if st.form_submit_button("تقديم طلب الإجازة"):
            if تاريخ_البدء and تاريخ_الانتهاء:
                if تاريخ_الانتهاء >= تاريخ_البدء:
                    عدد_الأيام = (تاريخ_الانتهاء - تاريخ_البدء).days + 1
                    
                    # تحميل الطلبات الحالية
                    طلبات_الإجازة = تحميل_البيانات('طلبات_الإجازة.csv', pd.DataFrame())
                    
                    # إنطلب جديد
                    طلب_جديد = {
                        'معرف_الموظف': st.session_state.معرف_المستخدم,
                        'نوع_الإجازة': نوع_الإجازة,
                        'تاريخ_البدء': تاريخ_البدء.strftime('%Y-%m-%d'),
                        'تاريخ_الانتهاء': تاريخ_الانتهاء.strftime('%Y-%m-%d'),
                        'عدد_الأيام': عدد_الأيام,
                        'السبب': السبب,
                        'الحالة': 'قيد المراجعة',
                        'ملاحظات_المدير': '',
                        'معرف_المدير_الموافق': None,
                        'تاريخ_الطلب': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                    }
                    
                    # إضافة الطلب الجديد
                    if طلبات_الإجازة.empty:
                        طلب_جديد['معرف'] = 1
                        طلبات_الإجازة = pd.DataFrame([طلب_جديد])
                    else:
                        طلب_جديد['معرف'] = طلبات_الإجازة['معرف'].max() + 1
                        طلبات_الإجازة = pd.concat([طلبات_الإجازة, pd.DataFrame([طلب_جديد])], ignore_index=True)
                    
                    # حفظ البيانات
                    حفظ_البيانات('طلبات_الإجازة.csv', طلبات_الإجازة)
                    
                    st.success("✅ تم تقديم طلب الإجازة بنجاح وسيتم مراجعته قريباً")
                else:
                    st.error("❌ تاريخ الانتهاء يجب أن يكون بعد تاريخ البدء")
            else:
                st.error("❌ يرجى ملء جميع الحقول")

def عرض_طلباتي():
    st.title("📋 طلبات الإجازة الخاصة بي")
    
    طلبات_الإجازة = تحميل_البيانات('طلبات_الإجازة.csv', pd.DataFrame())
    أنواع_الإجازات = تحميل_البيانات('أنواع_الإجازات.csv')
    
    if not طلبات_الإجازة.empty:
        طلبات_الموظف = طلبات_الإجازة[طلبات_الإجازة['معرف_الموظف'] == st.session_state.معرف_المستخدم]
        
        if not طلبات_الموظف.empty:
            for _, طلب in طلبات_الموظف.iterrows():
                نوع_الإجازة = أنواع_الإجازات[أنواع_الإجازات['معرف'] == طلب['نوع_الإجازة']]
                اسم_الإجازة = نوع_الإجازة.iloc[0]['اسم_الإجازة'] if not نوع_الإجازة.empty else "غير معروف"
                
                with st.expander(f"{اسم_الإجازة} - {طلب['تاريخ_البدء']} إلى {طلب['تاريخ_الانتهاء']}"):
                    col1, col2, col3 = st.columns(3)
                    col1.metric("عدد الأيام", طلب['عدد_الأيام'])
                    col2.metric("الحالة", طلب['الحالة'])
                    col3.metric("تاريخ الطلب", طلب['تاريخ_الطلب'])
                    
                    if طلب['السبب']:
                        st.write(f"**السبب:** {طلب['السبب']}")
                    if طلب['ملاحظات_المدير']:
                        st.write(f"**ملاحظات المدير:** {طلب['ملاحظات_المدير']}")
        else:
            st.info("لا توجد طلبات إجازة")
    else:
        st.info("لا توجد طلبات إجازة")

def عرض_رصيد_الإجازات():
    st.title("💰 رصيد الإجازات")
    
    أرصدة_الإجازات = تحميل_البيانات('أرصدة_الإجازات.csv', pd.DataFrame())
    
    if not أرصدة_الإجازات.empty:
        أرصدة_الموظف = أرصدة_الإجازات[أرصدة_الإجازات['معرف_الموظف'] == st.session_state.معرف_المستخدم]
        
        if not أرصدة_الموظف.empty:
            for _, رصيد in أرصدة_الموظف.iterrows():
                st.subheader(f"سنة {رصيد['السنة']}")
                
                col1, col2, col3 = st.columns(3)
                col1.metric("رصيد السنة الحالية", رصيد['رصيد_السنة_الحالية'])
                col2.metric("رصيد العام السابق 1", رصيد['رصيد_العام_السابق_1'])
                col3.metric("رصيد العام السابق 2", رصيد['رصيد_العام_السابق_2'])
        else:
            st.warning("لا يوجد رصيد إجازات مسجل")
    else:
        st.warning("لا يوجد رصيد إجازات مسجل")

# التطبيق الرئيسي
def main():
    # تهيئة النظام إذا كان أول تشغيل
    if not os.path.exists('المستخدمين.csv'):
        تهيئة_النظام()
        st.success("✅ تم تهيئة النظام بنجاح!")
    
    # التحقق من تسجيل الدخول
    if 'معرف_المستخدم' not in st.session_state:
        صفحة_تسجيل_الدخول()
    else:
        # إضافة زر تسجيل الخروج في السايدبار
        with st.sidebar:
            if st.button("🚪 تسجيل الخروج"):
                for key in list(st.session_state.keys()):
                    del st.session_state[key]
                st.rerun()
        
        # توجيه حسب نوع المستخدم
        if st.session_state.نوع_المستخدم == 'موظف':
            لوحة_الموظف()
        elif st.session_state.نوع_المستخدم == 'مدير_النظام':
            لوحة_مدير_النظام()
        else:
            st.warning("لوحة التحكم قيد التطوير لنوع المستخدم هذا")

# لوحة مدير النظام (مبسطة)
def لوحة_مدير_النظام():
    st.sidebar.title(f"👨‍💼 مدير النظام - {st.session_state.اسم_الموظف}")
    
    قائمة_المدير = ["الرئيسية", "إدارة المستخدمين", "الطلبات المعلقة"]
    اختيار = st.sidebar.selectbox("القائمة", قائمة_المدير)
    
    if اختيار == "الرئيسية":
        الرئيسية_مدير_النظام()
    elif اختيار == "إدارة المستخدمين":
        إدارة_المستخدمين()
    elif اختيار == "الطلبات المعلقة":
        الطلبات_المعلقة()

def الرئيسية_مدير_النظام():
    st.title("👨‍💼 لوحة تحكم مدير النظام")
    
    # إحصائيات
    col1, col2, col3, col4 = st.columns(4)
    
    المستخدمين = تحميل_البيانات('المستخدمين.csv')
    طلبات_الإجازة = تحميل_البيانات('طلبات_الإجازة.csv', pd.DataFrame())
    
    عدد_الموظفين = len(المستخدمين) if not المستخدمين.empty else 0
    طلبات_معلقة = len(طلبات_الإجازة[طلبات_الإجازة['الحالة'] == 'قيد المراجعة']) if not طلبات_الإجازة.empty else 0
    طلبات_معتمدة = len(طلبات_الإجازة[طلبات_الإجازة['الحالة'] == 'معتمد']) if not طلبات_الإجازة.empty else 0
    
    with col1:
        st.metric("إجمالي الموظفين", عدد_الموظفين)
    with col2:
        st.metric("طلبات قيد المراجعة", طلبات_معلقة)
    with col3:
        st.metric("طلبات معتمدة", طلبات_معتمدة)

def إدارة_المستخدمين():
    st.title("👥 إدارة المستخدمين")
    
    المستخدمين = تحميل_البيانات('المستخدمين.csv')
    
    if not المستخدمين.empty:
        st.subheader("المستخدمون الحاليون")
        st.dataframe(المستخدمين[['اسم_المستخدم', 'اسم_الموظف', 'نوع_المستخدم', 'القسم', 'الحالة']], use_container_width=True)
    
    # إضافة مستخدم جديد
    st.subheader("إضافة مستخدم جديد")
    with st.form("إضافة_مستخدم"):
        col1, col2 = st.columns(2)
        
        with col1:
            اسم_المستخدم = st.text_input("اسم المستخدم")
            كلمة_المرور = st.text_input("كلمة المرور", type="password")
            اسم_الموظف = st.text_input("اسم الموظف")
        
        with col2:
            نوع_المستخدم = st.selectbox("نوع المستخدم", ["موظف", "مدير", "مسؤول_إداري", "مدير_النظام"])
            القسم = st.text_input("القسم")
        
        if st.form_submit_button("إضافة مستخدم"):
            if اسم_المستخدم and كلمة_المرور and اسم_الموظف:
                # إضافة المستخدم الجديد
                مستخدم_جديد = {
                    'معرف': len(المستخدمين) + 1,
                    'اسم_المستخدم': اسم_المستخدم,
                    'كلمة_المرور': تشفير_كلمة_المرور(كلمة_المرور),
                    'اسم_الموظف': اسم_الموظف,
                    'نوع_المستخدم': نوع_المستخدم,
                    'القسم': القسم,
                    'الحالة': 'نشط',
                    'تاريخ_الإنشاء': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                }
                
                المستخدمين = pd.concat([المستخدمين, pd.DataFrame([مستخدم_جديد])], ignore_index=True)
                حفظ_البيانات('المستخدمين.csv', المستخدمين)
                
                # إنشاء رصيد للمستخدم الجديد
                أرصدة_الإجازات = تحميل_البيانات('أرصدة_الإجازات.csv', pd.DataFrame())
                رصيد_جديد = {
                    'معرف': len(أرصدة_الإجازات) + 1,
                    'معرف_الموظف': مستخدم_جديد['معرف'],
                    'رصيد_السنة_الحالية': 30,
                    'رصيد_العام_السابق_1': 0,
                    'رصيد_العام_السابق_2': 0,
                    'السنة': 2024,
                    'تاريخ_التحديث': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                }
                
                أرصدة_الإجازات = pd.concat([أرصدة_الإجازات, pd.DataFrame([رصيد_جديد])], ignore_index=True)
                حفظ_البيانات('أرصدة_الإجازات.csv', أرصدة_الإجازات)
                
                st.success("✅ تم إضافة المستخدم بنجاح")
                st.rerun()
            else:
                st.error("❌ يرجى ملء جميع الحقول المطلوبة")

def الطلبات_المعلقة():
    st.title("📋 الطلبات المعلقة")
    
    طلبات_الإجازة = تحميل_البيانات('طلبات_الإجازة.csv', pd.DataFrame())
    أنواع_الإجازات = تحميل_البيانات('أنواع_الإجازات.csv')
    المستخدمين = تحميل_البيانات('المستخدمين.csv')
    
    if not طلبات_الإجازة.empty:
        طلبات_معلقة = طلبات_الإجازة[طلبات_الإجازة['الحالة'] == 'قيد المراجعة']
        
        if not طلبات_معلقة.empty:
            for _, طلب in طلبات_معلقة.iterrows():
                نوع_الإجازة = أنواع_الإجازات[أنواع_الإجازات['معرف'] == طلب['نوع_الإجازة']]
                اسم_الإجازة = نوع_الإجازة.iloc[0]['اسم_الإجازة'] if not نوع_الإجازة.empty else "غير معروف"
                
                الموظف = المستخدمين[المستخدمين['معرف'] == طلب['معرف_الموظف']]
                اسم_الموظف = الموظف.iloc[0]['اسم_الموظف'] if not الموظف.empty else "غير معروف"
                
                with st.expander(f"{اسم_الموظف} - {اسم_الإجازة}"):
                    col1, col2 = st.columns(2)
                    col1.write(f"**الفترة:** {طلب['تاريخ_البدء']} إلى {طلب['تاريخ_الانتهاء']}")
                    col1.write(f"**عدد الأيام:** {طلب['عدد_الأيام']}")
                    col2.write(f"**السبب:** {طلب['السبب']}")
                    
                    # خيارات الموافقة أو الرفض
                    col1, col2 = st.columns(2)
                    with col1:
                        if st.button(f"✅ الموافقة", key=f"approve_{طلب['معرف']}"):
                            # تحديث حالة الطلب
                            طلبات_الإجازة.loc[طلبات_الإجازة['معرف'] == طلب['معرف'], 'الحالة'] = 'معتمد'
                            طلبات_الإجازة.loc[طلبات_الإجازة['معرف'] == طلب['معرف'], 'معرف_المدير_الموافق'] = st.session_state.معرف_المستخدم
                            حفظ_البيانات('طلبات_الإجازة.csv', طلبات_الإجازة)
                            st.success("✅ تمت الموافقة على الطلب")
                            st.rerun()
                    
                    with col2:
                        if st.button(f"❌ الرفض", key=f"reject_{طلب['معرف']}"):
                            طلبات_الإجازة.loc[طلبات_الإجازة['معرف'] == طلب['معرف'], 'الحالة'] = 'مرفوض'
                            طلبات_الإجازة.loc[طلبات_الإجازة['معرف'] == طلب['معرف'], 'معرف_المدير_الموافق'] = st.session_state.معرف_المستخدم
                            حفظ_البيانات('طلبات_الإجازة.csv', طلبات_الإجازة)
                            st.success("✅ تم رفض الطلب")
                            st.rerun()
        else:
            st.info("لا توجد طلبات معلقة")
    else:
        st.info("لا توجد طلبات إجازة")

if __name__ == "__main__":
    main()
